[NDP Firmware]
# select the function mode.  This defines which [Function_x] 
# block will be used.  Function blocks define which images 
# to load into the NDP120  
#  1->Function_1;  
#  2->Function_2;  
#  3->Function_3; ...
# http://avnet.me/RASynDocsMode
Mode=1

[Function_1]
Description="5-keywords Single Mic"
MCU=mcu_fw_120.synpkg
DSP=dsp_firmware.synpkg
DNN=menu_demo_512_general_v105_rasyn_pdm0_ext_icm.synpkg
#DECIMATION_INSHIFT_VALUE=10    # http://avnet.me/RASynDocsDecimationInshift

DECIMATION_INSHIFT_OFFSET=-1 # Reduce the 5-keyword model input audio gain by 6db for better performance

[Function_2]
Description="5-keywords Dual Mic"
MCU=mcu_fw_120.synpkg
DSP=dsp_firmware_noaec_ff.synpkg
DNN=menu_demo_512_noaec_ff_v105_rasyn_pdm0_ext_icm.synpkg

[Function_3]
Description="Circle Motion"
MCU=mcu_fw_120.synpkg
DSP=dsp_firmware.synpkg
DNN=circular_motion_NDP120B0_icm42670.synpkg
Button_shift=imu      # redefine the short press user button to capture the IMU data

[Function_4]
Description="Edge Impulse Model Configuration"
MCU=mcu_fw_120.synpkg
DSP=dsp_firmware.synpkg
DNN=ei_model.synpkg

[Function_5]
Description="Alexa Single Mic"
MCU=mcu_fw_120.synpkg
DSP=dsp_firmware.synpkg
DNN=alexa_334_NDP120_B0_v11.synpkg

[Function_6]
Description="Alexa Dual Mic"
MCU=mcu_fw_120.synpkg
DSP=dsp_firmware_noaec_ff.synpkg
DNN=alexa_334ua__v2_ndp120b0_noaec_ff.synpkg

[Function_7]
Description="Edge Impulse Audio Model"
MCU=mcu_fw_120.synpkg
DSP=dsp_firmware.synpkg
DNN=ei_model.synpkg

[Function_8]
Description="Edge Impulse Motion Model"
MCU=mcu_fw_120.synpkg
DSP=dsp_firmware.synpkg
DNN=ei_motion_model.synpkg
Button_shift=imu  

# http://avnet.me/RASynDocsLeds
[Led]
# set led response color for each voice command, choose from # "red","green","blue","yellow","cyan" and "magenta".
IDX0=yellow     # ok-syntiant
IDX1=cyan       # up
IDX2=magenta    # down
IDX3=red        # back
IDX4=green      # next

# http://avnet.me/RASynDocsDebugPort
[Debug Print]
# Select debug port for application debug:  
#  1->by UART     # On the I/O board PMOD connector
#  2->by USB-VCOM # On the core board USB-C connector
Port=1         

[Recording Period] 
# Defines the duration of voice or IMU data recording 
# when the user button is pressed.
Recording_Period=10    # in seconds

# http://avnet.me/RASynDocsImuDataStream
[IMU data stream]
# Defines where to capture IMU data when the record button is 
# pressed.  Note that the [Function_x] block selected must
# define "Button_shift=imu" for this feature to work.   
#  0->Disable
#  1->Enable
Write_to_file=1        # write data to a *.csv file on the sdcard
Print_to_terminal=0    # output data to the serial debug terminal

[BLE Mode]
# Defines if BLE is enabled and the BLE Advertisement name

#  0-> Disables BLE mode where inference results are broadcast over BLE
#  1-> Enables BLE mode
BLE_Enabled=0
#BLE_Name=<Undefined>

# http://avnet.me/RASynDocsWiFi
[WIFI]
# Defines the WiFi configuration for the DA16600 WiFi module

# Access Point SSID and Password.  Only used if Use_Config_AP_Details=1
Access_Point=<your SSID here>
Access_Point_Password=<your SSID here>

# Define the two character country code where your device is operating
# This will set the correct tx levels and which channels are allowed to 
# operate.
Country_Code=US # 2-leter country code

# Define the ntp time server.  This should not need to be changed, but
# if required you can change the server.
NTP_Time_Server=pool.ntp.org

# Tells the application to either use the wifi credentials above, or if
# the user will use the "Renesas Wi-Fi Provisioning Tool" to configure the
# WiFi network.
#  0-> Don't use configuration items Above.  Use the "Renesas Wi-Fi 
#      Provisioning Tool" from your app store on your mobile device.
#      Note to use this option BLE mode must be enabled: [BLE Mode] --> BLE_Enabled=1 
#  1-> Use wifi AP and password set above 
Use_Config_AP_Details=0

[Cloud Connectivity]
# Used to select which cloud implementation the application will run
#  0=No Cloud Connectivity
#  1=Avnet's IoTConnect on AWS
#  2=AWS
#  3=Azure <Not implemented>
Target_Cloud=0

[IoTConnect] # http://avnet.me/RASynDocsIoTConnect
# Define the specific details for your IoTConnect instance and device.  See the
# Instructions for setting up an IoTConnect connection:  https://github.com/Avnet/RASynBoard-Out-of-Box-Demo/blob/rasynboard_v2_tiny/docs/IoTConnect.md
CPID=<your IoTConnect CPID here>
Environment=<your IoTConnect environment here>
Device_Unique_ID=<your IoTConnect Unique Device ID string here>


[AWS] # http://avnet.me/RASynDocsAWSIoTCore
# Define the specific details to support connecting to AWS IoT Core.
# Instructions for setting up an AWS IoT Core connection:  https://github.com/Avnet/RASynBoard-Out-of-Box-Demo/blob/rasynboard_v2_tiny/docs/AWSIoTCore.md
Endpoint=<your AWS endpoint string here>
Device_Unique_ID=<your AWS Unique Device ID string here>
MQTT_Pub_Topic=<your AWS publish topic here>
MQTT_Sub_Topic=<your AWS subscribe topic here>

[CERTS]
# Define where the application should find the MQTT certificates
#  0->Certificates are located in src/cert.h header file
#  1->Load certificates from files, user must define filenames below 
#  2->Don't load any certificates, the certificates are already 
#    loaded onto the DA16600
#
# A good process is to load the certificates from a file, then change
# this setting to '2'.  This will reduce the connect time.
Cert_Location=0

# Define the certificate file names on the microSD card.  Used when 
# Cert_Location=1
Root_CA_Filename=certs/AmazonRootCA1.pem
Device_Cert_Filename=certs/<your device cert>.crt
Device_Private_Key_Filename=certs/<your device public key>.pem